---
import type { SimpleIcon } from "simple-icons";
import {
	siReact,
	siJavascript,
	siTypescript,
	siHtml5,
	siCss,
	siTailwindcss,
	siBootstrap,
	siAstro,
	siRedux,
	siNodedotjs,
	siExpress,
	siDotnet,
	siPython,
	siPostgresql,
	siMysql,
	siGit,
	siGithub,
	siLinux,
	siFigma,
	siDocker,
	siMongodb,
	siPrisma,
	siGithubactions,
	siNetlify
} from "simple-icons";
import hexToRgb from "../helpers.ts";

interface Props {
	name: string;
	icon: string;
	category: string;
	status?: "learning" | "proficient";
	color?: string;
}

const { name, icon, category, status = "proficient", color: propColor } = Astro.props;

// slugs to imported icons
const iconMap: Record<string, SimpleIcon> = {
	react: siReact,
	javascript: siJavascript,
	typescript: siTypescript,
	html5: siHtml5,
	css: siCss,
	tailwindcss: siTailwindcss,
	bootstrap: siBootstrap,
	astro: siAstro,
	redux: siRedux,
	nodedotjs: siNodedotjs,
	express: siExpress,
	dotnet: siDotnet,
	python: siPython,
	postgresql: siPostgresql,
	mysql: siMysql,
	git: siGit,
	github: siGithub,
	linux: siLinux,
	figma: siFigma,
	docker: siDocker,
	mongodb: siMongodb,
	prisma: siPrisma,
	githubactions: siGithubactions,
	netlify: siNetlify
};

// Local SVG
const localRawSvgs = import.meta.glob("../assets/tech/*.svg", { eager: true, as: "raw" });
type CustomIcon = { title: string; hex: string; svgInner: string; viewBox: string };
const customIcons: Record<string, CustomIcon> = {};

function registerLocalIcon(slug: string, filename: string, hex: string, title: string) {
	const path = `../assets/tech/${filename}`;
	const raw = localRawSvgs[path] as string | undefined;
	if (!raw) return;
	// Extraer viewBox si existe
	const viewBoxMatch = raw.match(/viewBox="([^"]+)"/i);
	const viewBox = viewBoxMatch ? viewBoxMatch[1] : "0 0 24 24";
	// Extraer contenido interno quitando la etiqueta <svg ...> y </svg>
	const inner = raw
		.replace(/^[\s\S]*?<svg[^>]*>/i, "")
		.replace(/<\/svg>\s*$/i, "")
		.trim();
	customIcons[slug] = { title, hex: hex.replace(/^#/, ""), svgInner: inner, viewBox };
}

// Register custom icons
registerLocalIcon("sqlserver", "sqlserver.svg", "#A91D22", "SQL Server");
registerLocalIcon("sql", "sql.svg", "#FFFFFF", "SQL");
registerLocalIcon("oracle", "oracle.svg", "#ea1b22", "Oracle");
registerLocalIcon("java", "java.svg", "#f89820", "Java");

const iconData = iconMap[icon];
const customData = !iconData ? customIcons[icon] : undefined;

// Prioritize explicit color prop over simple-icons/custom hex
const fallbackHex = iconData?.hex || customData?.hex || "FFFFFF";
let color = (propColor?.trim() || `#${fallbackHex}`) as string;
if (!color.startsWith("#") && /^[0-9a-fA-F]{6}$/.test(color)) {
	color = `#${color}`;
}

const title = iconData?.title || customData?.title || name;

// Construimos el SVG completo
let svgMarkup = "";
if (iconData) {
	svgMarkup = `<svg role="img" viewBox="0 0 24 24" fill="currentColor" aria-label="${title}" xmlns="http://www.w3.org/2000/svg"><title>${title}</title>${iconData.svg}</svg>`;
} else if (customData) {
	svgMarkup = `<svg role="img" viewBox="${customData.viewBox}" fill="currentColor" aria-label="${title}" xmlns="http://www.w3.org/2000/svg"><title>${title}</title>${customData.svgInner}</svg>`;
}

const rgb = hexToRgb(color);
const backgroundColorHover = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.15)`;
const backgroundColorNormal = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.08)`;
const borderColorHover = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.5)`;
const shadowColor = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.2)`;
---

<div
	class="tech-item group relative flex flex-col items-center justify-center gap-1 rounded-lg border text-center transition-all duration-200"
	data-category={category}
	data-status={status}
	style={`
        background-color: ${backgroundColorNormal};
        border-color: rgba(71,85,105,0.5);
        --hover-bg: ${backgroundColorHover};
        --hover-border: ${borderColorHover};
        --hover-shadow: 0 8px 25px -8px ${shadowColor};
    `}
>
	<div
		class="relative flex h-6 w-6 items-center justify-center md:h-9 md:w-9"
		style={`color:${color};`}
		set:html={svgMarkup}
	/>
	<span class="px-1 text-center text-[10px] leading-tight text-slate-300 md:text-xs">
		{name}
	</span>
	{
		status === "learning" && (
			<span class="learning-badge absolute top-0.5 rounded bg-amber-900 px-0.5 py-px text-[8px] font-semibold tracking-wide text-amber-400 shadow sm:px-1 sm:py-[2px] sm:text-[9px] md:-top-2.5 md:-right-2 md:text-[10px]">
				Learning
			</span>
		)
	}
</div>

<style>
	.learning-badge {
		line-height: 1;
		white-space: nowrap;
	}
	.tech-item {
		width: 52px;
		height: 72px;
		background-color: transparent !important;
		border-color: transparent !important;
	}
	@media (min-width: 640px) {
		.tech-item {
			width: 78px;
			height: 78px;
		}
	}
	@media (min-width: 768px) {
		.tech-item {
			width: 90px;
			height: 90px;
		}
	}
	.tech-item:hover {
		background-color: var(--hover-bg) !important;
		border-color: var(--hover-border) !important;
		box-shadow: var(--hover-shadow);
		opacity: 1;
	}
	.tech-item svg {
		width: 100%;
		height: 100%;
		display: block;
		transition: filter 0.2s;
	}
	.tech-item:hover svg {
		filter: brightness(1.08);
	}
</style>
